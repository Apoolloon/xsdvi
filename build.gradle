plugins{
    id 'java-library'
    id 'idea'
    id "com.dorongold.task-tree" version "1.4"
}
repositories {
    jcenter()
    mavenLocal()
}

configurations {
    thirdparty
    compile.extendsFrom thirdparty
}

dependencies {
    thirdparty fileTree(dir: 'lib', include: ['*.jar'])
//    implementation 'xerces:xercesImpl:2.9.0'
//    implementation 'org.apache.xerces:com.springsource.org.apache.xerces:2.9.0'
//    implementation 'apache-xerces:xercesImpl:2.9.0'
}

version = '1.0.1'

sourceSets {
    main {
        java { srcDirs = ['src'] }
        resources { srcDirs = ['lib'] }
    }
    test {
        resources { srcDirs = ['res'] }
    }
}

jar {
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '),
            'Main-Class': 'xsdvi.XsdVi'
            //'com.github.mcgr0g.xsdvi.cli'
        )
    }
}

task configure(group: 'utsk') {
    group = 'utsk'
    description = 'user-task: load properies from external gradle config'
    apply from: "${projectDir}/props.gradle"
    println 'TRACER loading ext props'
}



task slimJar(type: Jar, group: 'utsk') {
    description "Copies the ONLY classpath into the final jar "
    dependsOn = [configurations.runtime ]
    manifest.from jar.manifest
//    archiveClassifier = 'uber'
    archiveBaseName = "$project.ext.slimName"
    from {(configurations.runtime - configurations.thirdparty).collect {
        it.isDirectory() ? it : zipTree(it)
        }
    }
    exclude "xercesImpl*"
    with jar
    copy {
        from "lib"
        include "*.jar"
        into "${jarLibs}"
    }
}
task fatJar(type: Jar, group: 'utsk') {
    description "Copies the resource jar's into the final jar "
    // TODO унаследовтаь манифест как в слиме
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '),
            'Main-Class': 'xsdvi.XsdVi'
        )
    }
    archiveBaseName = "$project.ext.fatName"
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    with jar
}

task distribution(group: 'utsk') {
    description = 'user-task: prepare jars for tests and zipping'
    dependsOn = [configure, build, slimJar]
    println "get build at ${jarLibs}"
}

task release(group: 'utsk') {
    group = 'utsk'
    description = 'user-task: make relese for maven repo and so on'
    dependsOn(distribution)
    doLast {
        println "We release now: $version"
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    // TODO починить определение версиии, в тестах подставляется, как будто для релиза
    if (taskGraph.hasTask(":release")) {
        println "take hot release"
    } else {
        version = version + '-SNAPSHOT'
    }
}

task genFaktura(type:Exec, group: 'tsts'){
    dependsOn = [distribution, processTestResources]
    workingDir "$project.ext.tstDir"
    // TODO встроить в цепочку тестов задачи test или после нее
    commandLine 'cmd', '/c', "java -jar ..\\libs\\$project.ext.slimName-${version}-SNAPSHOT.jar ..\\resources\\test\\examples\\xsd\\faktura.xsd"
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}

task testAll(group: 'tsts'){
    dependsOn genFaktura
    project.file("$project.ext.tstDir").mkdirs()
    doLast {
        println('TRACER tests runned')
    }
}
// TODO эта инструкция на работает, нужно курнуть еще раз про граф зависимостей
testAll.mustRunAfter test